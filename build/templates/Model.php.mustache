<?php
/**
 * This file is generated from a template with metadata extracted from the data model.
 * If modifications are required, it is important to consider if they should be done in the template
 * or in the generated file, in which case caution must be exerted to avoid overwritting.
 */

namespace App\Models\Tenants;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use App\Models\ModelWithLogs;
use App\Helpers\Config;
use Carbon\Carbon;
use Carbon\Exceptions\InvalidFormatException;
{{factory_referenced_models}}

/**
 * {{class_name}} model
 *
 * Acces to the percistency layer
 {{#is_view}}
 * {{table}} is a MySQL view
{{/is_view}}
{{^is_view}}
 * {{table}} is a regular table not a MySQL view
{{/is_view}}
 *
 * @author fred
 *
 */
class {{class_name}} extends ModelWithLogs {

{{^is_view}}
    use HasFactory;
{{/is_view}}

    /**
     * The associated database table
     */
    protected $table = '{{table}}';
 
 {{^is_view}}   
{{#primary_index}}
    /**
     * The primary key associated with the table.
     *
     * @var string
     */
    protected $primaryKey = '{{primary_index}}';

{{/primary_index}}
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
	protected $fillable = [{{& fillable_names}}];
{{/is_view}}
{{#is_referenced}}

    /**
     * Return a human readable unique string
     */
    public function image() {
        return "{{element}}_" . $this->{{primary_index}};
    }
    
    /**
     * Return a selector to select one element
     */
    public static function selector($where = []) {
        ${{table}} = {{class_name}}::where($where)->get();
        $res = [];
        foreach (${{table}} as ${{element}}) {
            $res[] = ['name' => ${{element}}->image(), 'id' => ${{element}}->{{primary_index}}];
        }
        return $res;
    }
{{/is_referenced}}
{{#foreign_key_list}}
    
    /**
     * Get the image of the referenced {{&foreign_element}}
     * 
     * @return String
     */
    public function {{&foreign_element}}_image() {
        ${{&foreign_element}} = {{&foreign_class}}::findOrFail ( $this->{{&foreign_element}}_id );
        return ${{&foreign_element}}->image();
    }

{{/foreign_key_list}}	
{{#currency_mutators}}

    /**
     * Get the {{&field_name}} currency
     *
     * @param  float  $value
     * @return string the value formatted for local currency
     */
    public function get{{&field_name}}Attribute($value) {
        if (!trim($value)) return $value;
        $result = $value;
        return $result;
    }
{{/currency_mutators}}
{{#float_mutators}}

    /**
     * Get the {{&field_name}} float
     *
     * @param  float  $value
     * @return the value with the correct number of digit
     */
    public function get{{&field_name}}Attribute($value) {
        if (!trim($value)) return $value;
        $result = $value;
        return $result;
    }
{{/float_mutators}}
{{#is_view}}
    /**
     * Views usually have no regular factories. The generation of test data
     * usually implies to generate data in others tables.
     * 
     * @param array $argv arguments to pass to referenced factories
     */
    public static function factoryCreate($argv = []) {
        $cnt = self::count();
        // Generating one element
        // [[class_name]]::factory()->create($argv);
        return $cnt;
    }
{{/is_view}}
}