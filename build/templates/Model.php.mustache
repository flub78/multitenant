<?php
/**
 * This file is generated from a template with metadata extracted from the data model.
 * If modifications are required, it is important to consider if they should be done in the template
 * or in the generated file, in which case caution must be exerted to avoid overwritting.
 */

namespace App\Models\Tenants;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use App\Models\ModelWithLogs;
use App\Helpers\Config;
use Carbon\Carbon;
use Carbon\Exceptions\InvalidFormatException;

/**
 * {{class_name}} model
 *
 * Acces to the percistency layer
 {{#is_view}}
 * {{table}} is a MySQL view
{{/is_view}}
{{^is_view}}
 * {{table}} is a regular table not a MySQL view
{{/is_view}}
 *
 * @author fred
 *
 */
class {{class_name}} extends ModelWithLogs {

    use HasFactory;

    /**
     * The associated database table
     */
    protected $table = '{{table}}';
 
 {{^is_view}}   
{{#primary_index}}
    /**
     * The primary key associated with the table.
     *
     * @var string
     */
    protected $primaryKey = '{{primary_index}}';

{{/primary_index}}
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
	protected $fillable = [{{& fillable_names}}];
{{/is_view}}
{{#is_referenced}}

    /**
     * Return a human readable unique string
     */
    public function image() {
        return "{{element}}_" . $this->{{primary_index}};
    }
    
    /**
     * Return a selector to select one element
     */
    public static function selector($where = []) {
        ${{table}} = {{class_name}}::where($where)->get();
        $res = [];
        foreach (${{table}} as ${{element}}) {
            $res[] = ['name' => ${{element}}->image(), 'id' => ${{element}}->{{primary_index}}];
        }
        return $res;
    }
{{/is_referenced}}	
{{#date_mutators}}

    /**
     * Get the {{&field_name}} date
     *
     * @param  string  $value date in MySql format
     * @return string the date in local format
     */
    public function get{{&field_name}}Attribute($value) {
        if (!$value) return $value;
        $db_format = 'Y-m-d';
        try {
            $date = Carbon::createFromFormat($db_format, $value);
        } catch (InvalidFormatException $e) {
            echo "get{{&field_name}}Attribute($value) " . $e->getMessage();
            exit;
        }
        $date->tz(Config::config('app.timezone'));
        $result = $date->format(__('general.date_format'));
        // echo "\nget{{&field_name}}Attribute(String $value) => $result";
        return $result;
    }
    
    /**
     * Set the {{&field_name}} date
     *
     * @param  string  $value date in local format
     */
    public function set{{&field_name}}Attribute($value) {
        if (!$value) return $value;
        $db_format = 'Y-m-d';
        $date = Carbon::createFromFormat(__('general.date_format'), $value);
        $this->attributes['{{&field}}'] = $date->format($db_format);
    }
{{/date_mutators}}
{{#datetime_mutators}}

    /**
     * Get the {{&field_name}} datetime
     *
     * @param  string  $value datetime in MySql format
     * @return string the datetime in local format
     */
    public function get{{&field_name}}Attribute($value) {
        if (! $value) return $value;
        $db_format = 'Y-m-d H:i:s';
        try {
            $datetime = Carbon::createFromFormat($db_format, $value);
        } catch (InvalidFormatException $e) {
             echo "get{{&field_name}}Attribute($value) " . $e->getMessage();
            exit;
       }
        $datetime->tz(Config::config('app.timezone'));
        $result = $datetime->format(__('general.datetime_format'));
        // echo "\nget{{&field_name}}Attribute($value) => $result\n";
        return $result;
    }
    
    /**
     * Set the {{&field_name}} datetime
     *
     * @param  string  $value datetime in local format
     */
    public function set{{&field_name}}Attribute($value) {
        if (!$value) return $value;
        $db_format = 'Y-m-d H:i:s';
        $datetime = Carbon::createFromFormat(__('general.datetime_format'), $value);
        $this->attributes['{{&field}}'] = $datetime->format($db_format);
    }
          
    /**
     * Get the {{&field_name}} date
     * 
     * @param String $value
     * @return string
     */
    public function get{{&field_name}}DateAttribute($value) {
        $result = substr($this->{{&field}}, 0, 10);
        // echo "\nget{{&field_name}}DateAttribute($value) => $result";
        return $result;
    }

    /**
     * Get the {{&field_name}} time
     * 
     * @param String $value
     * @return string
     */
    public function get{{&field_name}}TimeAttribute($value) {
        $result = substr($this->{{&field}}, 11, 5);
        // echo "\nget{{&field_name}}TimeAttribute($value) => $result";
        return $result;
    }
    
    /**
     *  Set the {{&field_name}} date
     *  
     * @param String $value
     */
    public function set{{&field_name}}DateAttribute($value) {
        if (!$value) return $value;
        $time = ($this->{{&field}}_time) ? $this->{{&field}}_time : "00:00";
        $local_datetime = $value . " " . $time;    
        $this->set{{&field_name}}Attribute($local_datetime);
        // echo "\nset{{&field_name}}DateAttribute($value) => set{{&field_name}}Attribute($local_datetime)";
    }
    
    /**
     * Set the {{&field_name}} time
     * 
     * @param String $value
     */
    public function set{{&field_name}}TimeAttribute($value) {
        if (!$value) return $value;        
        $local_datetime = $this->{{&field}}_date . " " . $value;
        $this->set{{&field_name}}Attribute($local_datetime);
        // echo "\nset{{&field_name}}TimeAttribute($value) => set{{&field_name}}Attribute($local_datetime)";
    }
    
{{/datetime_mutators}}
{{#currency_mutators}}

    /**
     * Get the {{&field_name}} currency
     *
     * @param  float  $value
     * @return string the value formatted for local currency
     */
    public function get{{&field_name}}Attribute($value) {
        if (!$value) return $value;
        $result = $value;
         // echo "\nget{{&field_name}}Attribute(String $value) => $result";
        return $result;
    }
{{/currency_mutators}}
{{#float_mutators}}

        /**
     * Get the {{&field_name}} float
     *
     * @param  float  $value
     * @return the value with the correct number of digit
     */
    public function get{{&field_name}}Attribute($value) {
        if (!$value) return $value;
        $result = $value;
         // echo "\nget{{&field_name}}Attribute(String $value) => $result";
        return $result;
    }
{{/float_mutators}}
}