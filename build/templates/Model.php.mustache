<?php
/**
 * This file is generated from a template with metadata extracted from the data model.
 * If modifications are required, it is important to consider if they should be done in the template
 * or in the generated file, in which case caution must be exerced to avoid overwritting.
 */

namespace App\Models\Tenants;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use App\Models\ModelWithLogs;
use App\Helpers\Config;
use Carbon\Carbon;


/**
 * {{class_name}} model
 *
 * Acces to the percistency layer
 *
 * @author fred
 *
 */
class {{class_name}} extends ModelWithLogs {

    use HasFactory;

    /**
     * The associated database table
     */
    protected $table = '{{table}}';
    
    /**
     * The primary key associated with the table.
     *
     * @var string
     */
    protected $primaryKey = '{{primary_index}}';

{{id_data_type}}
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
	protected $fillable = [{{& fillable_names}}];
{{#is_referenced}}

    /**
     * Return a human readable unique string
     */
    public function image() {
        return "{{element}}_" . $this->{{primary_index}};
    }
    
    /**
     * Return a selector to select one element
     */
    public static function selector($where = []) {
        ${{table}} = {{class_name}}::where($where)->get();
        $res = [];
        foreach (${{table}} as ${{element}}) {
            $res[] = ['name' => ${{element}}->image(), 'id' => ${{element}}->{{primary_index}}];
        }
        return $res;
    }
{{/is_referenced}}	
{{#date_mutators}}

    /**
     * Get the {{&field_name}} date
     *
     * @param  string  $value date in MySql format
     * @return string the date in local format
     */
    public function get{{&field_name}}Attribute($value) {
        $date = Carbon::createFromFormat('Y-m-d', $value);
        $date->tz(Config::config('app.timezone'));
        return $date->format(__('general.date_format'));
    }
    
    /**
     * Set the {{&field_name}} date
     *
     * @param  string  $value date in local format
     */
    public function set{{&field_name}}Attribute($value) {
        $date = Carbon::createFromFormat(__('general.date_format'), $value);
        $this->attributes['{{&field}}'] = $date->format("Y-m-d");
    }
{{/date_mutators}}
}