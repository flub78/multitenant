{{=[[ ]]=}}
<?php
/**
 * This file is generated from a template with metadata extracted from the data model.
 * If modifications are required, it is important to consider if they should be done in the template
 * or in the generated file, in which case caution must be exerced to avoid overwritting.
 */

namespace tests\Unit\Tenants;

use Tests\TenantTestCase;

use App\Models\Tenants\[[class_name]];

/**
 * Unit test for [[class_name]] model
 
 * @author frederic
 *
 */
class [[class_name]]ModelTest extends TenantTestCase {
        
    /**
     * Test element creation, read, update and delete
     * Given the database server is on
     * Given the schema exists in database
     * When creating an element
     * Then it is stored in database, it can be read, updated and deleted
     */
    public function testCRUD () {
    	        
        $initial_count = [[class_name]]::count();
        
        // Create an element
        $[[element]]1 = [[class_name]]::factory()->create();
        $this->assertNotNull($[[element]]1);
        $latest = [[class_name]]::latest()->first();
        $[[primary_index]] = $latest->[[primary_index]];
        
        // and a second
        [[class_name]]::factory()->create();
        
         // a third to generate values for updates
        $[[element]]3 = [[class_name]]::factory()->make();
        foreach ([ [[&fillable_names]] ] as $field) {
            $this->assertNotEquals($[[element]]1->$field, $[[element]]3->$field);
        }
 
        $this->assertTrue([[class_name]]::count() == $initial_count + 2, "Two new elements in the table");
        $this->assertDatabaseCount('[[table]]',  $initial_count + 2);
                        
        # Read
        $stored = [[class_name]]::where(['[[primary_index]]' => $[[primary_index]]])->first();
        
        $this->assertNotNull($stored, "It is possible to retrieve the [[element]]");
        
        foreach ([ [[&fillable_names]] ] as $field) {
            $this->assertEquals($[[element]]1->$field, $stored->$field, "Checks the element $field fetched from the database");
        }
        
        // Update
        foreach ([ [[&fillable_names]] ] as $field) {
            $stored->$field = $[[element]]3->$field;
        }
        
        $stored->update();
        
        // get it back
        $back = [[class_name]]::where('[[primary_index]]', $[[primary_index]])->first();
        foreach ([ [[&fillable_names]] ] as $field) {
            $this->assertEquals($back->$field, $[[element]]3->$field, "$field after update");
            $this->assertDatabaseHas('[[table]]', [
                $field => $[[element]]3->$field,
            ]);
        }
        
        // Delete
        $stored->delete();   
        $this->assertDeleted($stored);
        $this->assertTrue([[class_name]]::count() == $initial_count + 1, "One less elements in the table");
        foreach ([ [[&fillable_names]] ] as $field) {
            $this->assertDatabaseMissing('[[table]]', [$field => $[[element]]3->$field]);
        }
    }
    
    
    public function test_deleting_non_existing_element () {
    	$initial_count = [[class_name]]::count();
    	
    	$[[element]] = [[class_name]]::factory()->make();
    	$[[element]]->[[primary_index]] = "999999999";
    	$[[element]]->delete();
    	
    	$this->assertTrue([[class_name]]::count() == $initial_count, "No changes in database");
    }
    
[[#is_referenced]]
    public function test_computed_attributes() {
        $[[element]] = [[class_name]]::factory()->create();
        $[[element]]2 = [[class_name]]::factory()->create();
        
        $this->assertNotEquals('', $[[element]]->image(), "image");
        
        $selector = [[class_name]]::selector();
        $this->assertEquals(2, count($selector));
        $this->assertEquals($[[element]]->[[primary_index]], $selector[0]['[[primary_index]]']);
        $this->assertEquals($[[element]]2->image(), $selector[1]['name']);
        
        $selector2 = [[class_name]]::selector(['[[primary_index]]' => $[[element]]2->[[primary_index]]]);
        $this->assertEquals(1, count($selector2));
    }    
[[/is_referenced]]        

}
