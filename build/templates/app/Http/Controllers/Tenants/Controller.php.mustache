{{=[[ ]]=}}
<?php
/*
 * Code generated from a template, if modifications are required, carefully consider if they should be done
 * in the generated code or in the template.
 */
namespace App\Http\Controllers\Tenants;

use App\Http\Controllers\Controller;
use App\Http\Requests\Tenants\[[class_name]]Request;
use App\Models\Tenants\[[class_name]];
use App\Helpers\DateFormat;
use Illuminate\Http\Request;
use Redirect;
[[factory_referenced_models]]

/**
 * Controller for [[element]]
 * 
 * @author frederic
 *
 */
class [[class_name]]Controller extends Controller {

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request) {

        $query = [[class_name]]::query();

	    $filter_open = ($request->has ('filter_open')) ? "-show" : "";	    
	    if ($request->has ('filter')) {	        
	        $this->applyFilter($query, $request->input ('filter'));
	    }
	    $[[table]] = $query->get ();   

    	return view ( 'tenants/[[element]]/index', compact ( '[[table]]' ) )
            ->with('filter_open', $filter_open);
    }

[[^is_view]]
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create() { 
        [[#select_list ]]
        [[&selector]]
        [[/select_list ]]
    	return view ('tenants/[[element]]/create')[[#select_list ]][[&with]][[/select_list ]];
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param App\Http\Requests\Tenants\[[class_name]]Request
     * @return \Illuminate\Http\Response
     */
    public function store([[class_name]]Request $request) {
        $validatedData = $request->validated(); // Only retrieve the data, the validation is done

        [[# controller_list ]]
        [[&store]]
        [[/ controller_list ]]
        [[class_name]]::create($validatedData);
       return redirect('/[[element]]')->with('success', __('general.creation_success', [ 'elt' => __("[[element]].elt")]));
     }
[[/is_view]] 

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id) {
	    $[[element]] = [[class_name]]::find($id);
		[[#select_list]]
        [[&selector]]
        [[/select_list]]
        return view('tenants/[[element]]/show')
            ->with(compact('[[element]]'))[[#select_list]][[&with]][[/select_list]];
    }

    
[[^is_view]]
    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Tenants\[[class_name]]  $[[element]]
     * @return \Illuminate\Http\Response
     */
    public function edit([[class_name]] $[[element]]) {
        [[# controller_list ]]
        [[&convert]]
        [[/ controller_list ]]
        [[#select_list]]
        [[&selector]]
        [[/select_list]]
        return view('tenants/[[element]]/edit')
            ->with(compact('[[element]]'))[[#select_list]][[&with]][[/select_list]];
    }

    
    /**
     * Update the specified resource in storage.
     *
     * @param App\Http\Requests\Tenants\[[class_name]]Request;
     * @param String $id
     * @return \Illuminate\Http\Response
     * 
     * @SuppressWarnings("PMD.ShortVariable")
     */
    public function update([[class_name]]Request $request, $id) {
        $validatedData = $request->validated();
        $previous = [[class_name]]::find($id);

[[# controller_list ]]
        [[&update]]
[[/ controller_list ]]
        [[class_name]]::where([ '[[primary_index]]' => $id])->update($validatedData);

        return redirect('/[[element]]')->with('success', __('general.modification_success', [ 'elt' => __("[[element]].elt") ]));
    }

    
    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Tenants\[[class_name]]  $[[element]]
     * @return \Illuminate\Http\Response
     */
    public function destroy([[class_name]] $[[element]]) {
    	$[[primary_index]] = $[[element]]->[[primary_index]];
        [[# controller_list ]]
        [[&destroy]]
        [[/ controller_list ]]
    	$[[element]]->delete();
    	return redirect ( '[[element]]' )->with ( 'success', __('general.deletion_success', ['elt' => $[[primary_index]]]));
    }
[[/is_view]]
[[#picture_url]]

    /**
     * Display a picture in the browser
     * 
     * @param unknown $id
     * @param unknown $field
     * @return \App\Http\Controllers\unknown
     */
    public function picture($id, $field) {
        $elt = [[class_name]]::find($id);
        if ($elt) {
            $filename = $elt->$field;       
            return $this->displayImage($filename);
        }      
    }
[[/picture_url]]    
[[#download_url]]

    /**
     * Download a previously uploaded file
     * 
     * @param unknown $id
     * @param unknown $field
     * @return \Symfony\Component\HttpFoundation\StreamedResponse|\Illuminate\Routing\Redirector|\Illuminate\Http\RedirectResponse
     */
    public function download($id, $field) {
        $elt = [[class_name]]::find($id);
        if ($elt) {
            $filename = $elt->$field;
            return $this->download_file($filename);
        }
    }
[[/download_url]]

	/**
	 * This method is called by the filter form submit buttons
	 * Generate a filter parameter according to the filter form and call the index view
	 * 
	 * @param Request $request
	 */
	public function filter(Request $request) {
	    $inputs = $request->input();
	    
	    // When it is not the filter button redirect to index with no filtering
	    if ($request->input('button') != __('general.filter')) {
	        return redirect('/[[element]]');
	    }
	    
	    /*
	     * Generate a filter string from the form inputs fields
	     * 
	     * Checkboxes and enumerates need an additonal checkbox to detemine if they must be taken into account
	     * by the filter
	     */
	    $filters_array = [];
	    $fields = [ [[&filter_fields]] ];
	    foreach ($fields as $field) {
	        if (array_key_exists($field, $inputs) && $inputs[$field]) {
	            $filters_array[] = $field . ':' . $inputs[$field];
	        }
	    }
	    $filter = implode(",", $filters_array);
	    
	    
        return redirect("/[[element]]?filter=$filter&filter_open=1")->withInput();
	}
}
